{{- include "sch.config.init" (list . "ivia.sch.chart.config.values") -}}
{{- $dot := . }}

General Information:
====================

To obtain the administrator password execute the following command:
    kubectl get secret --namespace {{ .Release.Namespace }} {{ template "admin.secret" . }} -o jsonpath="{.data.{{ template "admin.secret.key" . }}}" | base64 --decode; echo

Configuration Service
=====================

The configuration service should be used to configure the environment.

{{- if contains "NodePort" .Values.iviaconfig.service.type }}

The configuration service has been configured with a NodePort service.
To connect to the service, obtain the external IP address and port:

HOST=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath='{.items[0].status.addresses[0].address}')
{{- if .Values.iviaconfig.service.servicename }}
PORT=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ printf "%s" .Values.iviaconfig.service.servicename }} -o jsonpath='{.spec.ports[0].nodePort}')
{{- else }}
PORT=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template "config.name" . }} -o jsonpath='{.spec.ports[0].nodePort}')
{{- end }}

The service can then be accessed at the following URL: https://$HOST:$PORT

{{- else if contains "ClusterIP" .Values.iviaconfig.service.type -}}

The configuration service has been configured with a ClusterIP service.
To connect to the service, use kubernetes port forwarding:

POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app={{ template "config.name" . }}" -o jsonpath="{.items[0].metadata.name}")
kubectl port-forward $POD_NAME 9443:{{ template "admin.port" . }}

The service can then be accessed at the following URL: https://127.0.0.1:9443

{{- end }}
You could also configure an ingress or load balancer.


Web Reverse Proxy Instances
===========================

The Web Reverse Proxy instances should be used as an entry point into the environment.  The instance names in this release are:
{{- range .Values.iviawrp.container.instances }}
  - {{ .name }}
{{- end }}
{{- $defaultservicetype := (default "ClusterIP" .Values.iviawrp.service.type) }}
{{- range $index, $inst := .Values.iviawrp.container.instances }}
{{- $servicetype := (default $defaultservicetype $inst.servicetype) }}
{{- if eq "NodePort" $servicetype }}

The {{ $inst.name }} instance has been configured with a NodePort service.
To connect to the instance, obtain the external IP address and port:

HOST=$(kubectl get nodes --namespace {{ $.Release.Namespace }} -o jsonpath='{.items[0].status.addresses[0].address}')
{{- if $inst.servicename }}
PORT=$(kubectl get svc --namespace {{ $.Release.Namespace }} {{ printf "%s" $inst.servicename }} -o jsonpath='{.spec.ports[0].nodePort}')
{{- else }}
PORT=$(kubectl get svc --namespace {{ $.Release.Namespace }} {{ include "wrp.name" (list $dot $inst.name) }} -o jsonpath='{.spec.ports[0].nodePort}')
{{- end }}

The instance can then be accessed at the following URL: https://$HOST:$PORT

{{- else }}

The {{ $inst.name }} instance has been configured with a ClusterIP service.
To connect to the instance, use kubernetes port forwarding:

POD_NAME=$(kubectl get pods --namespace {{ $.Release.Namespace }} -l "app={{ include "wrp.name" (list $dot $inst.name) }}" -o jsonpath="{.items[0].metadata.name}")
kubectl port-forward $POD_NAME 9443:{{ template "runtime.port" . }}

The instance can then be accessed at the following URL: https://127.0.0.1:9443

{{- end }}
You could also set up an ingress or loadbalancer.

{{- end }}

{{- if .Values.iviaruntime.container.enabled }}

Runtime
=======

The federation and advanced access control runtime requests should always be serviced via a secure Web reverse proxy instance.
{{- if .Values.iviaruntime.service.servicename }}
The runtime service can be accessed by the secure Web reverse proxy over SSL through the {{ printf "%s" .Values.iviaruntime.service.servicename }} host and {{ template "runtime.port" . }} port.
{{- else }}
The runtime service can be accessed by the secure Web reverse proxy over SSL through the {{ template "runtime.name" . }} host and {{ template "runtime.port" . }} port.
{{- end }}
{{- end }}

{{- if .Values.iviadsc.container.enabled }}

DSC
===

The distributed session cache service should only ever be accessed by Verify Identity Access components running in the same cluster.
{{- if .Values.iviadsc.service.servicename }}
The primary distributed session cache service can be accessed using the {{ printf "%s" .Values.iviadsc.service.servicename }} host and {{ template "runtime.port" . }} port.
{{- else }}
The primary distributed session cache service can be accessed using the {{ include "dsc.name" (list . "primary") }} host and {{ template "runtime.port" . }} port.
{{- end }}
{{- if .Values.iviadsc.container.useReplica }}

{{- if .Values.iviadsc.service.servicename }}
The secondary distributed session cache service can be accessed using the {{ printf "%s2" .Values.iviadsc.service.servicename }} host and {{ template "runtime.port" . }} port.
{{- else -}}
The secondary distributed session cache service can be accessed using the {{ include "dsc.name" (list . "secondary") }} host and {{ template "runtime.port" . }} port.
{{- end }}

The two distributed session cache replicas will communicate over the {{ template "replica.port" . }} port.
{{- end }}

{{- end }}

{{- if .Values.iviapostgresql.container.enabled }}

PostgreSQL
==========

The PostgreSQL service provided is not meant for production and should only be used in proof of concept or demo environments.

The database has been configured with the following attributes:
{{- if .Values.iviapostgresql.service.servicename }}
  host:          {{ printf "%s" .Values.iviapostgresql.service.servicename }}
{{- else }}
  host:          {{ template "postgresql.name" . }}
{{- end }}
  port:          {{ template "postgresql.port" . }}
  {{- if .Values.iviapostgresql.container.keySecretName }}
  secure:        true
  {{- else }}
  secure:        false
  {{- end }}
  database name: {{ template "postgresql.dbname" . }}
  database user: {{ template "postgresql.dbuser" . }}
  password:      -- same as the administrator password for the environment

{{- end }}

{{- if .Values.iviaopenldap.container.enabled }}

OpenLDAP
========

The OpenLDAP service provided is not meant for production and should only be used in PoC or demonstration environments.

The directory has been configured with the following attributes:
{{- if .Values.iviaopenldap.service.servicename }}
  host:          {{ printf "%s" .Values.iviaopenldap.service.servicename }}
{{- else }}
  host:          {{ template "openldap.name" . }}
{{- end }}
  port:          636
  domain:        {{ template "openldap.domain" . }}
  root user:     cn=root,secAuthority=Default
  password:      -- same as the administrator password for the environment

{{- end }}
