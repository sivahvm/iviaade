apiVersion: v1
kind: Template
labels:
  template: verify-identity-access-core
metadata:
  creationTimestamp: null
  name: verify-dentity-access-core
  annotations:
    openshift.io/display-name: IBM Verify Identity Access Core
    iconClass: icon-sso
    description: IBM Verify Identity Access Core Services
    openshift.io/long-description: This template deploys the core services required for an IBM
      Verify Identity Access environment.  Initially only the Config Service starts.
    openshift.io/documentation-url: https://ibm.biz/verifyaccesscontainers
    openshift.io/provider-display-name: IBM Verify Identity Access
    openshift.io/support-url: https://ibm.biz/iamcommunity
    tags: ibm, verifyaccess, identity, isam, ivia, ivia
message: |-

  Application Name: ${APP_NAME}

  The following services have been created in your project:
    - ${CONFIG_SERVICE}
    - ${RUNTIME_SERVICE}
    - ${DSC_SERVICE}
    - ${DSC_SERVICE}2
    - ${DSC_SERVICE}3
    - ${DSC_SERVICE}4

  Config Service Admin User: admin
  Config Service Admin Password: ${ADMIN_PW}

  Config Reader Username: ${CONFIG_ID}
  Config Reader Password: ${CONFIG_PW}
  (This user must be created in the LMI)
objects:
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      build: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: '${APP_NAME}:latest'
    source:
      binary: {}
      type: Binary
    strategy:
      dockerStrategy: {}
      type: Docker
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      build: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
      - annotations: null
        from:
          kind: DockerImage
          name: 'icr.io/ivia/ivia-config:${IVIA_VERSION}'
        importPolicy: {}
        name: base
        referencePolicy:
          type: Source
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APP_NAME}-config
    labels:
      app: ${APP_NAME}-core
      name: ${APP_NAME}-config
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 50Mi
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-lmi_admin_password: '{.data[''lmi-admin-password'']}'
    name: ${APP_NAME}-lmi
    labels:
      app: ${APP_NAME}-core
  stringData:
    lmi-admin-password: ${ADMIN_PW}
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-config_service_url: '{.data[''config-service-url'']}'
      template.openshift.io/expose-config_read_username: '{.data[''config-read-username'']}'
      template.openshift.io/expose-config_read_password: '{.data[''config-read-password'']}'
    name: ${APP_NAME}-core
    labels:
      app: ${APP_NAME}-core
  stringData:
    config-service-url: https://${CONFIG_SERVICE}:9443/shared_volume
    config-read-username: ${CONFIG_ID}
    config-read-password: ${CONFIG_PW}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}-core
      name: ${APP_NAME}-config
    name: ${APP_NAME}-config
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: ${APP_NAME}-config
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:base
          containerNames:
            - ${APP_NAME}-config
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}-core
          name: ${APP_NAME}-config
      spec:
        serviceAccountName: ${SERVICE_ACCOUNT}
        securityContext:
          runAsNonRoot: true
          runAsUser:    6000
        containers:
        - env:
          - name: SERVICE
            value: config
          - name: CONTAINER_TIMEZONE
            value: ${TIMEZONE}
          - name: ADMIN_PWD
            valueFrom:
              secretKeyRef:
                key: lmi-admin-password
                name: ${APP_NAME}-lmi
          image: ${APP_NAME}:base
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-config
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
              - /sbin/health_check.sh
              - livenessProbe
            initialDelaySeconds: 120
            periodSeconds: 10
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              scheme: HTTPS
              port: 9443
              path: /core/login
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 2
          volumeMounts:
          - mountPath: /var/shared
            name: ${APP_NAME}-config
          - mountPath: /var/application.logs
            name: ${APP_NAME}-config-logs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-config
          persistentVolumeClaim:
            claimName: ${APP_NAME}-config
        - name: ${APP_NAME}-config-logs
          emptyDir: {}
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      build: ${APP_NAME}-dsc
    name: ${APP_NAME}-dsc
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: '${APP_NAME}-dsc:latest'
    source:
      binary: {}
      type: Binary
    strategy:
      dockerStrategy: {}
      type: Docker
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      build: ${APP_NAME}-dsc
    name: ${APP_NAME}-dsc
  spec:
    lookupPolicy:
      local: false
    tags:
      - annotations: null
        from:
          kind: DockerImage
          name: 'icr.io/ivia/ivia-dsc:${IVIA_VERSION}'
        importPolicy: {}
        name: base
        referencePolicy:
          type: Source
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}-core
      name: ${APP_NAME}-dsc1
    name: ${APP_NAME}-dsc1
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: ${APP_NAME}-dsc1
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}-dsc:latest
          containerNames:
            - ${APP_NAME}-dsc1
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}-core
          name: ${APP_NAME}-dsc1
          iviaaffinity: ${APP_NAME}-dsc
      spec:
        serviceAccountName: ${SERVICE_ACCOUNT}
        securityContext:
          runAsNonRoot: true
          runAsUser:    6000
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: iviaaffinity
                    operator: In
                    values:
                    - ${APP_NAME}-dsc
                topologyKey: kubernetes.io/hostname
        containers:
        - env:
          - name: SERVICE
            value: dsc
          - name: INSTANCE
            value: "1"
          - name: CONTAINER_TIMEZONE
            value: ${TIMEZONE}
          - name: SNAPSHOT
            value: baked.snapshot
          image: ${APP_NAME}:latest
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-dsc1
          ports:
          - containerPort: 9443
            protocol: TCP
          - containerPort: 9444
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
              - /sbin/health_check.sh
              - livenessProbe
            periodSeconds: 10
            timeoutSeconds: 2
          readinessProbe:
            exec:
              command:
              - /sbin/health_check.sh
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
          volumeMounts:
          - mountPath: /var/application.logs
            name: ${APP_NAME}-dsc1-logs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-dsc1-logs
          emptyDir: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}-core
      name: ${APP_NAME}-dsc2
    name: ${APP_NAME}-dsc2
  spec:
    progressDeadlineSeconds: 600
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      name: ${APP_NAME}-dsc2
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}-dsc:latest
          containerNames:
            - ${APP_NAME}-dsc2
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}-core
          name: ${APP_NAME}-dsc2
          iviaaffinity: ${APP_NAME}-dsc
      spec:
        serviceAccountName: ${SERVICE_ACCOUNT}
        securityContext:
          runAsNonRoot: true
          runAsUser:    6000
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: iviaaffinity
                    operator: In
                    values:
                    - ${APP_NAME}-dsc
                topologyKey: kubernetes.io/hostname
        containers:
        - env:
          - name: SERVICE
            value: dsc
          - name: INSTANCE
            value: "2"
          - name: CONTAINER_TIMEZONE
            value: ${TIMEZONE}
          - name: SNAPSHOT
            value: baked.snapshot
          image: ${APP_NAME}:latest
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-dsc2
          ports:
          - containerPort: 9443
            protocol: TCP
          - containerPort: 9444
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
              - /sbin/health_check.sh
              - livenessProbe
            periodSeconds: 10
            timeoutSeconds: 2
          readinessProbe:
            exec:
              command:
              - /sbin/health_check.sh
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
          volumeMounts:
          - mountPath: /var/application.logs
            name: ${APP_NAME}-dsc2-logs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-dsc2-logs
          emptyDir: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}-core
      name: ${APP_NAME}-dsc3
    name: ${APP_NAME}-dsc3
  spec:
    progressDeadlineSeconds: 600
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      name: ${APP_NAME}-dsc3
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}-dsc:latest
          containerNames:
            - ${APP_NAME}-dsc3
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}-core
          name: ${APP_NAME}-dsc3
          iviaaffinity: ${APP_NAME}-dsc
      spec:
        serviceAccountName: ${SERVICE_ACCOUNT}
        securityContext:
          runAsNonRoot: true
          runAsUser:    6000
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: iviaaffinity
                    operator: In
                    values:
                    - ${APP_NAME}-dsc
                topologyKey: kubernetes.io/hostname
        containers:
        - env:
          - name: SERVICE
            value: dsc
          - name: INSTANCE
            value: "3"
          - name: CONTAINER_TIMEZONE
            value: ${TIMEZONE}
          - name: SNAPSHOT
            value: baked.snapshot
          image: ${APP_NAME}:latest
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-dsc3
          ports:
          - containerPort: 9443
            protocol: TCP
          - containerPort: 9444
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
              - /sbin/health_check.sh
              - livenessProbe
            periodSeconds: 10
            timeoutSeconds: 2
          readinessProbe:
            exec:
              command:
              - /sbin/health_check.sh
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
          volumeMounts:
          - mountPath: /var/application.logs
            name: ${APP_NAME}-dsc3-logs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-dsc3-logs
          emptyDir: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}-core
      name: ${APP_NAME}-dsc4
    name: ${APP_NAME}-dsc4
  spec:
    progressDeadlineSeconds: 600
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      name: ${APP_NAME}-dsc4
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}-dsc:latest
          containerNames:
            - ${APP_NAME}-dsc4
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}-core
          name: ${APP_NAME}-dsc4
          iviaaffinity: ${APP_NAME}-dsc
      spec:
        serviceAccountName: ${SERVICE_ACCOUNT}
        securityContext:
          runAsNonRoot: true
          runAsUser:    6000
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: iviaaffinity
                    operator: In
                    values:
                    - ${APP_NAME}-dsc
                topologyKey: kubernetes.io/hostname
        containers:
        - env:
          - name: SERVICE
            value: dsc
          - name: INSTANCE
            value: "4"
          - name: CONTAINER_TIMEZONE
            value: ${TIMEZONE}
          - name: SNAPSHOT
            value: baked.snapshot
          image: ${APP_NAME}-dsc:latest
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-dsc4
          ports:
          - containerPort: 9443
            protocol: TCP
          - containerPort: 9444
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
              - /sbin/health_check.sh
              - livenessProbe
            periodSeconds: 10
            timeoutSeconds: 2
          readinessProbe:
            exec:
              command:
              - /sbin/health_check.sh
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
          volumeMounts:
          - mountPath: /var/application.logs
            name: ${APP_NAME}-dsc4-logs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-dsc4-logs
          emptyDir: {}
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      build: ${APP_NAME}-runtime
    name: ${APP_NAME}-runtime
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: '${APP_NAME}-runtime:latest'
    source:
      binary: {}
      type: Binary
    strategy:
      dockerStrategy: {}
      type: Docker
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      build: ${APP_NAME}-runtime
    name: ${APP_NAME}-runtime
  spec:
    lookupPolicy:
      local: false
    tags:
      - annotations: null
        from:
          kind: DockerImage
          name: 'icr.io/ivia/ivia-runtime:${IVIA_VERSION}'
        importPolicy: {}
        name: base
        referencePolicy:
          type: Source
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}-core
      name: ${APP_NAME}-runtime
    name: ${APP_NAME}-runtime
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: ${APP_NAME}-runtime
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}-runtime:latest
          containerNames:
            - ${APP_NAME}-runtime
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}-core
          name: ${APP_NAME}-runtime
      spec:
        serviceAccountName: ${SERVICE_ACCOUNT}
        securityContext:
          runAsNonRoot: true
          runAsUser:    6000
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: name
                    operator: In
                    values:
                    - ${APP_NAME}-runtime
                topologyKey: kubernetes.io/hostname
        containers:
        - env:
          - name: SERVICE
            value: runtime
          - name: CONTAINER_TIMEZONE
            value: ${TIMEZONE}
          - name: SNAPSHOT
            value: baked.snapshot
          image: ${APP_NAME}:latest
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-runtime
          ports:
          - containerPort: 9443
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
              - /sbin/health_check.sh
              - livenessProbe
           initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              scheme: HTTPS
              port: 9443
              path: /sps/static/ibm-logo.png
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
          volumeMounts:
          - mountPath: /var/application.logs
            name: ${APP_NAME}-runtime-logs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-runtime-logs
          emptyDir: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${CONFIG_SERVICE}
    labels:
      app: ${APP_NAME}-core
      name: ${APP_NAME}-config
  spec:
    ports:
    - name: lmi
      port: 9443
      protocol: TCP
      targetPort: 9443
    selector:
      name: ${APP_NAME}-config
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${DSC_SERVICE}
    labels:
      app: ${APP_NAME}-core
      name: ${APP_NAME}-dsc1
  spec:
    ports:
    - name: service
      port: 9443
      protocol: TCP
      targetPort: 9443
    - name: replication
      port: 9444
      protocol: TCP
      targetPort: 9444
    selector:
      name: ${APP_NAME}-dsc1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${DSC_SERVICE}2
    labels:
      app: ${APP_NAME}-core
      name: ${APP_NAME}-dsc2
  spec:
    ports:
    - name: service
      port: 9443
      protocol: TCP
      targetPort: 9443
    - name: replication
      port: 9444
      protocol: TCP
      targetPort: 9444
    selector:
      name: ${APP_NAME}-dsc2
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${DSC_SERVICE}3
    labels:
      app: ${APP_NAME}-core
      name: ${APP_NAME}-dsc3
  spec:
    ports:
    - name: service
      port: 9443
      protocol: TCP
      targetPort: 9443
    - name: replication
      port: 9444
      protocol: TCP
      targetPort: 9444
    selector:
      name: ${APP_NAME}-dsc3
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${DSC_SERVICE}4
    labels:
      app: ${APP_NAME}-core
      name: ${APP_NAME}-dsc4
  spec:
    ports:
    - name: service
      port: 9443
      protocol: TCP
      targetPort: 9443
    - name: replication
      port: 9444
      protocol: TCP
      targetPort: 9444
    selector:
      name: ${APP_NAME}-dsc4
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${RUNTIME_SERVICE}
    labels:
      app: ${APP_NAME}-core
      name: ${APP_NAME}-runtime
  spec:
    ports:
    - name: https
      port: 9443
      protocol: TCP
      targetPort: 9443
    selector:
      name: ${APP_NAME}-runtime
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
parameters:
  - displayName: Application Name
    description: This is the name for the application which is used to create unique object names in the cluster.
    name: APP_NAME
    value: verifyaccess
  - displayName: Verify Identity Access Image Version
    description: The tag that will be used to pull the icr.io/ivia/ivia images.
    name: IVIA_VERSION
    value: 11.0.0.0
  - displayName: Config Service Name
    description: The name for the config service.  Also used as the hostname for connections within the cluster.
    name: CONFIG_SERVICE
    value: iviaconfig
  - displayName: Primary DSC Service Name
    description: The name for the Primary DSC service.  Also used as the hostname for connections within the cluster.
      Other DSC service/host names will have 2, 3, and 4 appended.
    name: DSC_SERVICE
    value: iviadsc
  - displayName: Runtime Service Name
    description: The name for the runtime service.  Also used as the hostname for connections within the cluster.
    name: RUNTIME_SERVICE
    value: iviaruntime
  - displayName: LMI Admin Password
    description: This will be the password for the config service admin user (for both Web and REST access)
    name: ADMIN_PW
    from: '[a-zA-Z0-9]{16}'
    generate: expression
  - displayName: Image Pull Secret
    description: This is an (existing) docker login secret for pulling the Verify Identity Access images.
      Only required if hosting images on a private repository.
    name: PULL_SECRET
    value: dockerlogin
  - displayName: Timezone
    description: The timezone for message logging (e.g. Europe/London)
    name: TIMEZONE
    value: Etc/UTC
  - displayName: Service Account
    description: This is the (existing) Service Account for running the pods.
    name: SERVICE_ACCOUNT
    value: verifyaccess
