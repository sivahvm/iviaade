apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: verify-identity-access-snapmgr
metadata:
  creationTimestamp: null
  name: verify-identity-access-snapmgr
  annotations:
    openshift.io/display-name: IBM Verify Identity Access Snapshot Manager
    iconClass: icon-sso
    description: IBM Verify Identity Access Snapshot Manager
    openshift.io/long-description: This template deploys the optional snapshot manager
      service for an IBM Verify Identity Access environment.
    openshift.io/documentation-url: https://ibm.biz/verifyaccesscontainers
    openshift.io/provider-display-name: IBM Verify Identity Access
    openshift.io/support-url: https://ibm.biz/iamcommunity
    tags: ibm, verifyaccess, isam, isva, ivia
message: |-

  Application Name: ${APP_NAME}

  The following service has been created in your project:
    - ${SNAPMGR_SERVICE}


  Snapshot service User: ${SNAPMGR_ID}
  Snapshot service Password: ${SNAPMGR_PW}

objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APP_NAME}-snapmgr
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-snapmgr
  spec:
    storageClassName: ${STORAGE_CLASS}
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 50Mi
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-config_service_url: '{.data[''config-service-url'']}'
      template.openshift.io/expose-config_read_username: '{.data[''config-read-username'']}'
      template.openshift.io/expose-config_read_password: '{.data[''config-read-password'']}'
    name: ${APP_NAME}-config
    labels:
      app: ${APP_NAME}
  stringData:
    config-service-url: https://${SNAPMGR_SERVICE}:9443
    config-read-username: ${SNAPMGR_ID}
    config-read-password: ${SNAPMGR_PW}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-snapmgr
    name: ${APP_NAME}-snapmgr
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: ${APP_NAME}-snapmgr
    triggers:
      - type: ConfigChange
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-snapmgr
      spec:
        serviceAccountName: ${SNAPMGR_SERVICE_ACCOUNT}
        containers:
        - env:
          - name: USERNAME
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-read-username
          - name: PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-read-password
          image: icr.io/ivia/ivia-snapshotmgr:${IVIA_VERSION}
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-snapmgr
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: ${APP_NAME}-snapmgr
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: ${PULL_SECRET}
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-snapmgr
          persistentVolumeClaim:
            claimName: ${APP_NAME}-snapmgr
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${SNAPMGR_SERVICE}
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-snapmgr
  spec:
    ports:
    - name: snapmgr
      port: 9443
      protocol: TCP
      targetPort: 9443
    selector:
      name: ${APP_NAME}-snapmgr
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
parameters:
  - displayName: Application Name
    description: This is the name for the application which is used to create unique object names in the cluster.
    name: APP_NAME
    value: verifyidentityaccess
  - displayName: Verify Access Image Version
    description: The tag that will be used to pull the icr.io.ivia/ivia-snapshotmgr image.
    name: IVIA_VERSION
    value: 11.0.0.0
  - displayName: Snapshot Service Name
    description: The name for the snapshot service.  Also used as the hostname for connections within the cluster.
    name: SNAPMGR_SERVICE
    value: iviasnapmgr
  - displayName: Snapshot Manager Username
    description: The username which will be used to POST/GET configuration from the snapshot manager service.
    name: SNAPMGR_ID
    value: snapmgr
  - displayName: Snapshot Manager Password
    description: The password that will be used to authenticate as the snapshot manager user.
    name: SNAPMGR_PW
    from: '[a-zA-Z0-9]{16}'
    generate: expression
  - displayName: Storage class
    description: Storage class that will be requested by PVC.
    name: STORAGE_CLASS
    value: default
  - displayName: Image Pull Secret
    description: This is an (existing) docker login secret for pulling the Verify Identity Access image.
      Only required if hosting images on a private repository
    name: PULL_SECRET
    value: dockerlogin
  - displayName: Timezone
    description: The timezone for message logging (e.g. Europe/London)
    name: TIMEZONE
    value: Etc/UTC
  - displayName: Config Service Account
    description: This is the (existing) Service Account for running the snapshot manager pod.
    name: SNAPMGR_SERVICE_ACCOUNT
    value: default
---
apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: verify-identity-access-config-with-snapmgr
metadata:
  creationTimestamp: null
  name: verify-identity-access-config-with-snapmgr
  annotations:
    openshift.io/display-name: IBM Verify Identity Access Config with Snapshot Manager
    iconClass: icon-sso
    description: IBM Verify Identity Access Config Service with Snapshot Manager
    openshift.io/long-description: This template deploys the config service required for an IBM
      Verify Identity Access environment when using a snapshot manager.
    openshift.io/documentation-url: https://ibm.biz/verifyaccesscontainers
    openshift.io/provider-display-name: IBM Verify Identity Access
    openshift.io/support-url: https://ibm.biz/iamcommunity
    tags: ibm, verifyaccess, isam, isva, ivia
message: |-

  Application Name: ${APP_NAME}

  The following service has been created in your project:
    - ${CONFIG_SERVICE}


  Config Service Admin User: admin
  Config Service Admin Password: ${ADMIN_PW}

objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APP_NAME}-config
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-config
  spec:
    storageClassName: ${STORAGE_CLASS}
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 50Mi
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-lmi_admin_password: '{.data[''lmi-admin-password'']}'
    name: ${APP_NAME}-lmi
    labels:
      app: ${APP_NAME}
  stringData:
    lmi-admin-password: ${ADMIN_PW}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-config
    name: ${APP_NAME}-config
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: ${APP_NAME}-config
    triggers:
      - type: ConfigChange
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-config
      spec:
        serviceAccountName: ${CONFIG_SERVICE_ACCOUNT}
        securityContext:
          runAsNonRoot: true
          runAsUser:    6000
        containers:
        - env:
          - name: CONTAINER_TIMEZONE
            value: ${TIMEZONE}
          - name: ADMIN_PWD
            valueFrom:
              secretKeyRef:
                key: lmi-admin-password
                name: ${APP_NAME}-lmi
          - name: CONFIG_SERVICE_URL
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-service-url
          - name: CONFIG_SERVICE_USER_NAME
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-read-username
          - name: CONFIG_SERVICE_USER_PWD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-read-password

          image: icr.io/ivia/ivia-config:${IVIA_VERSION}
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-config
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
              - /sbin/health_check.sh
              - livenessProbe
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 6
          readinessProbe:
            httpGet:
              scheme: HTTPS
              port: 9443
              path: /core/login
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 2
          startupProbe:
            exec:
              command:
              - /sbin/health_check.sh
            failureThreshold: 30
            periodSeconds: 10
            timeoutSeconds: 2
          volumeMounts:
          - mountPath: /var/shared
            name: ${APP_NAME}-config
          - mountPath: /var/application.logs
            name: ${APP_NAME}-config-logs
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: ${PULL_SECRET}
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-config
          persistentVolumeClaim:
            claimName: ${APP_NAME}-config
        - name: ${APP_NAME}-config-logs
          emptyDir: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${CONFIG_SERVICE}
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-config
  spec:
    ports:
    - name: lmi
      port: 9443
      protocol: TCP
      targetPort: 9443
    selector:
      name: ${APP_NAME}-config
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
parameters:
  - displayName: Application Name
    description: This is the name for the application which is used to create unique object names in the cluster.
    name: APP_NAME
    value: ibmvia
  - displayName: Verify Identity Access Image Version
    description: The tag that will be used to pull the icr.io/ivia/ivia images.
    name: IVIA_VERSION
    value: 11.0.0.0
  - displayName: Config Service Name
    description: The name for the config service.  Also used as the hostname for connections within the cluster.
    name: CONFIG_SERVICE
    value: iviaconfig
  - displayName: LMI Admin Password
    description: This will be the password for the config service admin user (for both Web and REST access)
    name: ADMIN_PW
    from: '[a-zA-Z0-9]{16}'
    generate: expression
  - displayName: Storage class
    description: Storage class that will be requested by PVC.
    name: STORAGE_CLASS
    value: default
  - displayName: Image Pull Secret
    description: This is an (existing) docker login secret for pulling the Verify Identity Access image.
      Only required if hosting images on a private repository
    name: PULL_SECRET
    value: dockerlogin
  - displayName: Timezone
    description: The timezone for message logging (e.g. Europe/London)
    name: TIMEZONE
    value: Etc/UTC
  - displayName: Config Service Account
    description: This is the (existing) Service Account for running the config pod.
    name: CONFIG_SERVICE_ACCOUNT
    value: verifyaccess-config
