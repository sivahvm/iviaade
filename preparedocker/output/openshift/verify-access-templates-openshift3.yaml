apiVersion: v1
kind: Template
labels:
  template: verify-access-config
metadata:
  creationTimestamp: null
  name: verify-access-config
  annotations:
    openshift.io/display-name: IBM Security Verify Access Config
    iconClass: icon-sso
    description: IBM Security Verify Access Config Service
    openshift.io/long-description: This template deploys the config service required for an IBM
      Security Verify Access environment.
    openshift.io/documentation-url: https://ibm.biz/verifyaccesscontainers
    openshift.io/provider-display-name: IBM Security Verify Access
    openshift.io/support-url: https://ibm.biz/iamcommunity
    tags: ibm, verifyaccess
message: |-

  Application Name: ${APP_NAME}

  The following service has been created in your project:
    - ${CONFIG_SERVICE}


  Config Service Admin User: admin
  Config Service Admin Password: ${ADMIN_PW}

  Config Reader Username: ${CONFIG_ID}
  Config Reader Password: ${CONFIG_PW}
  (This user must be created in the LMI)
objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APP_NAME}-config
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-config
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 50Mi
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-lmi_admin_password: '{.data[''lmi-admin-password'']}'
    name: ${APP_NAME}-lmi
    labels:
      app: ${APP_NAME}
  stringData:
    lmi-admin-password: ${ADMIN_PW}
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-config_service_url: '{.data[''config-service-url'']}'
      template.openshift.io/expose-config_read_username: '{.data[''config-read-username'']}'
      template.openshift.io/expose-config_read_password: '{.data[''config-read-password'']}'
    name: ${APP_NAME}-config
    labels:
      app: ${APP_NAME}
  stringData:
    config-service-url: https://${CONFIG_SERVICE}:9443/shared_volume
    config-read-username: ${CONFIG_ID}
    config-read-password: ${CONFIG_PW}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-config
    name: ${APP_NAME}-config
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: ${APP_NAME}-config
    triggers:
      - type: ConfigChange
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-config
      spec:
        serviceAccountName: ${CONFIG_SERVICE_ACCOUNT}
        securityContext:
          runAsNonRoot: true
          runAsUser:    6000
        containers:
        - env:
          - name: CONTAINER_TIMEZONE
            value: ${TIMEZONE}
          - name: ADMIN_PWD
            valueFrom:
              secretKeyRef:
                key: lmi-admin-password
                name: ${APP_NAME}-lmi
          image: icr.io/isva/verify-access:${ISVA_VERSION}
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-config
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
              - /sbin/health_check.sh
              - livenessProbe
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 6
          readinessProbe:
            httpGet:
              scheme: HTTPS
              port: 9443
              path: /core/login
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 2
          volumeMounts:
          - mountPath: /var/shared
            name: ${APP_NAME}-config
          - mountPath: /var/application.logs
            name: ${APP_NAME}-config-logs
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: ${PULL_SECRET}
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-config
          persistentVolumeClaim:
            claimName: ${APP_NAME}-config
        - name: ${APP_NAME}-config-logs
          emptyDir: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${CONFIG_SERVICE}
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-config
  spec:
    ports:
    - name: lmi
      port: 9443
      protocol: TCP
      targetPort: 9443
    selector:
      name: ${APP_NAME}-config
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
parameters:
  - displayName: Application Name
    description: This is the name for the application which is used to create unique object names in the cluster.
    name: APP_NAME
    value: verifyaccess
  - displayName: Verify Access Image Version
    description: The tag that will be used to pull the icr.io/isva/verify-access images.
    name: ISVA_VERSION
    value: 10.0.6.0
  - displayName: Config Service Name
    description: The name for the config service.  Also used as the hostname for connections within the cluster.
    name: CONFIG_SERVICE
    value: isvaconfig
  - displayName: LMI Admin Password
    description: This will be the password for the config service admin user (for both Web and REST access)
    name: ADMIN_PW
    from: '[a-zA-Z0-9]{16}'
    generate: expression
  - displayName: Config Read Username
    description: The username which will be used to pull configuration from the config service.
      If not using cfgsvc or admin, this user must be created using the LMI.
    name: CONFIG_ID
    value: cfgsvc
  - displayName: Config Read password
    description: The password that will be used to authenticate as the Config Read user.
    name: CONFIG_PW
    from: '[a-zA-Z0-9]{16}'
    generate: expression
  - displayName: Image Pull Secret
    description: This is an (existing) docker login secret for pulling the Access Manager image.
      Only required if hosting images on a private repository
    name: PULL_SECRET
    value: dockerlogin
  - displayName: Timezone
    description: The timezone for message logging (e.g. Europe/London)
    name: TIMEZONE
    value: Etc/UTC
  - displayName: Config Service Account
    description: This is the (existing) Service Account for running the config pod.  It must allow runAsNonRoot, SETUID, SETGID.
    name: CONFIG_SERVICE_ACCOUNT
    value: verifyaccess-config
---
apiVersion: v1
kind: Template
labels:
  template: verify-access-reverse-proxy
metadata:
  creationTimestamp: null
  name: verify-access-reverse-proxy
  annotations:
    openshift.io/display-name: IBM Security Verify Access Reverse Proxy
    iconClass: icon-sso
    description: IBM Security Verify Access Reverse Proxy
    openshift.io/long-description: This template deploys an IBM Security Verify Access Reverse Proxy
      instance.  This template can be deployed multiple times to create multiple Reverse Proxies.
    openshift.io/documentation-url: https://ibm.biz/verifyaccesscontainers
    openshift.io/provider-display-name: IBM Security Verify Access
    openshift.io/support-url: https://ibm.biz/iamcommunity
    tags: ibm, verifyaccess
message: |-

  Application Name: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}

  Reverse Proxy Instance Name: ${INSTANCE_NAME}
  An instance with this name must be configured in the config service.

  The following service has been created in your project:
    - ${SERVICE_NAME}

  Route URL: https://${DNS_NAME}

  Secret containing REST credentials: ${CORE_APP_NAME}-core
  Secret containing Config Admin credentials: ${CORE_APP_NAME}-lmi

objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}
      name: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}
    name: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}
    triggers:
      - type: ConfigChange
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}
          app: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}
                topologyKey: kubernetes.io/hostname
        serviceAccountName: ${SERVICE_ACCOUNT}
        securityContext:
          runAsNonRoot: true
          runAsUser:    6000
        containers:
        - env:
          - name: INSTANCE
            value: ${INSTANCE_NAME}
          - name: CONTAINER_TIMEZONE
            value: ${TIMEZONE}
          - name: CONFIG_SERVICE_URL
            valueFrom:
              secretKeyRef:
                name: ${CORE_APP_NAME}-config
                key: config-service-url
          - name: CONFIG_SERVICE_USER_NAME
            valueFrom:
              secretKeyRef:
                name: ${CORE_APP_NAME}-config
                key: config-read-username
          - name: CONFIG_SERVICE_USER_PWD
            valueFrom:
              secretKeyRef:
                name: ${CORE_APP_NAME}-config
                key: config-read-password
          image: icr.io/isva/verify-access-wrp:${ISVA_VERSION}
          imagePullPolicy: IfNotPresent
          name: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}
          ports:
          - containerPort: 9443
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
              - /sbin/health_check.sh
              - livenessProbe
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - /sbin/health_check.sh
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 2
          volumeMounts:
          - mountPath: /var/application.logs
            name: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}-logs
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: ${PULL_SECRET}
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}-logs
          emptyDir: {}
- apiVersion: v1
  kind: Route
  metadata:
    creationTimestamp: null
    name: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}
    labels:
      app: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}
      name: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}
  spec:
    host: ${DNS_NAME}
    port:
      targetPort: https
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: passthrough
    to:
      kind: Service
      name: ${SERVICE_NAME}
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${SERVICE_NAME}
    labels:
      app: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}
      name: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}
  spec:
    ports:
    - name: https
      port: 9443
      protocol: TCP
      targetPort: 9443
    selector:
      name: ${CORE_APP_NAME}-wrp-${INSTANCE_NAME}
    sessionAffinity: ClientIP
    sessionAffinityConfig:
      clientIP:
        timeoutSeconds: 10800
    type: ClusterIP
  status:
    loadBalancer: {}
parameters:
  - displayName: Verify Access Image Version
    description: The tag that will be used to pull the icr.io/isva/verify-access-wrp image.
    name: ISVA_VERSION
    value: 10.0.6.0
  - displayName: Core Application Name
    description: The name of the core application (omit -core).  This must match what was
      configured when creating the core application.
    name: CORE_APP_NAME
    value: verifyaccess
  - displayName: Instance name
    description: This must match an instance configured in the configuration service.
    name: INSTANCE_NAME
    value: rp1
  - displayName: Service Name
    description: The name of the Service. Also used as the hostname for connections within the cluster.
    name: SERVICE_NAME
    value: isvawrprp1
  - displayName: Fully Qualified DNS Name for Route
    description: A DNS or hosts entry must associate this hostname with IP of OpenShift router.
    name: DNS_NAME
    value: www.iamlab.ibm.com
  - displayName: Image Pull Secret
    description: This is an (existing) docker login secret for pulling the Access Manager image.
      Only required if hosting images on a private repository
    name: PULL_SECRET
    value: dockerlogin
  - displayName: Timezone
    description: The timezone for message logging (e.g. Europe/London)
    name: TIMEZONE
    value: Etc/UTC
  - displayName: Service Account
    description: This is the (existing) Service Account for running the Reverse Proxy pods.  Needs to allow running as specific non-root user.
    name: SERVICE_ACCOUNT
    value: verifyaccess-nonroot
---
apiVersion: v1
kind: Template
labels:
  template: verify-access-runtime
metadata:
  creationTimestamp: null
  name: verify-access-runtime
  annotations:
    openshift.io/display-name: IBM Security Verify Access Runtime
    iconClass: icon-sso
    description: IBM Security Verify Access Runtime Services
    openshift.io/long-description: This template deploys the runtime services required for an IBM
      Security Verify Access environment.
    openshift.io/documentation-url: https://ibm.biz/verifyaccesscontainers
    openshift.io/provider-display-name: IBM Security Verify Access
    openshift.io/support-url: https://ibm.biz/iamcommunity
    tags: ibm, verifyaccess
message: |-

  Application Name: ${APP_NAME}

  The following services have been created in your project:
    - ${RUNTIME_SERVICE}
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-runtime
    name: ${APP_NAME}-runtime
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: ${APP_NAME}-runtime
    triggers:
      - type: ConfigChange
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-runtime
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: name
                    operator: In
                    values:
                    - ${APP_NAME}-runtime
                topologyKey: kubernetes.io/hostname
        serviceAccountName: ${SERVICE_ACCOUNT}
        securityContext:
          runAsNonRoot: true
          runAsUser:    6000
        containers:
        - env:
          - name: CONTAINER_TIMEZONE
            value: ${TIMEZONE}
          - name: CONFIG_SERVICE_URL
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-service-url
          - name: CONFIG_SERVICE_USER_NAME
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-read-username
          - name: CONFIG_SERVICE_USER_PWD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-read-password
          image: icr.io/isva/verify-access-runtime:${ISVA_VERSION}
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-runtime
          ports:
          - containerPort: 9443
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
              - /sbin/health_check.sh
              - livenessProbe
            initialDelaySeconds: 90
            periodSeconds: 10
            failureThreshold: 2
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              scheme: HTTPS
              port: 9443
              path: /sps/static/ibm-logo.png
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 2
          volumeMounts:
          - mountPath: /var/application.logs
            name: ${APP_NAME}-runtime-logs
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: ${PULL_SECRET}
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-runtime-logs
          emptyDir: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${RUNTIME_SERVICE}
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-runtime
  spec:
    ports:
    - name: https
      port: 9443
      protocol: TCP
      targetPort: 9443
    selector:
      name: ${APP_NAME}-runtime
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
parameters:
  - displayName: Application Name
    description: This is the name for the application which is used to create unique object names in the cluster.
    name: APP_NAME
    value: verifyaccess
  - displayName: Verify Access Image Version
    description: The tag that will be used to pull the icr.io/isva/verify-access images.
    name: ISVA_VERSION
    value: 10.0.6.0
  - displayName: Runtime Service Name
    description: The name for the runtime service.  Also used as the hostname for connections within the cluster.
    name: RUNTIME_SERVICE
    value: isvaruntime
  - displayName: Image Pull Secret
    description: This is an (existing) docker login secret for pulling the Access Manager image.
      Only required if hosting images on a private repository
    name: PULL_SECRET
    value: dockerlogin
  - displayName: Timezone
    description: The timezone for message logging (e.g. Europe/London)
    name: TIMEZONE
    value: Etc/UTC
  - displayName: Runtime Service Account
    description: This is the (existing) Service Account for running the Runtime pods.  Needs to support running as specific non-root userid.
    name: SERVICE_ACCOUNT
    value: verifyaccess-nonroot
---
apiVersion: v1
kind: Template
labels:
  template: verify-access-dsc
metadata:
  creationTimestamp: null
  name: verify-access-dsc
  annotations:
    openshift.io/display-name: IBM Security Verify Access DSC
    iconClass: icon-sso
    description: IBM Security Verify Access DSC Services
    openshift.io/long-description: This template deploys the DSC services for an IBM
      Security Verify Access environment.  Initially only the primary DSC starts.
    openshift.io/documentation-url: https://ibm.biz/verifyaccesscontainers
    openshift.io/provider-display-name: IBM Security Verify Access
    openshift.io/support-url: https://ibm.biz/iamcommunity
    tags: ibm, verifyaccess
message: |-

  Application Name: ${APP_NAME}

  The following services have been created in your project:
    - ${DSC_SERVICE}
    - ${DSC_SERVICE}2
    - ${DSC_SERVICE}3
    - ${DSC_SERVICE}4

objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-dsc1
    name: ${APP_NAME}-dsc1
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: ${APP_NAME}-dsc1
    triggers:
      - type: ConfigChange
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-dsc1
          isvaaffinity: ${APP_NAME}-dsc
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: isvaaffinity
                    operator: In
                    values:
                    - ${APP_NAME}-dsc
                topologyKey: kubernetes.io/hostname
        serviceAccountName: ${SERVICE_ACCOUNT}
        containers:
        - env:
          - name: INSTANCE
            value: "1"
          - name: CONTAINER_TIMEZONE
            value: ${TIMEZONE}
          - name: CONFIG_SERVICE_URL
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-service-url
          - name: CONFIG_SERVICE_USER_NAME
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-read-username
          - name: CONFIG_SERVICE_USER_PWD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-read-password
          image: icr.io/isva/verify-access-dsc:${ISVA_VERSION}
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-dsc1
          ports:
          - containerPort: 9443
            protocol: TCP
          - containerPort: 9444
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
              - /sbin/health_check.sh
              - livenessProbe
            periodSeconds: 10
            timeoutSeconds: 2
          readinessProbe:
            exec:
              command:
              - /sbin/health_check.sh
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
          volumeMounts:
          - mountPath: /var/application.logs
            name: ${APP_NAME}-dsc1-logs
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: ${PULL_SECRET}
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-dsc1-logs
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-dsc2
    name: ${APP_NAME}-dsc2
  spec:
    progressDeadlineSeconds: 600
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: ${APP_NAME}-dsc2
    triggers:
      - type: ConfigChange
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-dsc2
          isvaaffinity: ${APP_NAME}-dsc
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: isvaaffinity
                    operator: In
                    values:
                    - ${APP_NAME}-dsc
                topologyKey: kubernetes.io/hostname
        serviceAccountName: ${SERVICE_ACCOUNT}
        containers:
        - env:
          - name: INSTANCE
            value: "2"
          - name: CONTAINER_TIMEZONE
            value: ${TIMEZONE}
          - name: CONFIG_SERVICE_URL
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-service-url
          - name: CONFIG_SERVICE_USER_NAME
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-read-username
          - name: CONFIG_SERVICE_USER_PWD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-read-password
          image: icr.io/isva/verify-access-dsc:${ISVA_VERSION}
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-dsc2
          ports:
          - containerPort: 9443
            protocol: TCP
          - containerPort: 9444
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
              - /sbin/health_check.sh
              - livenessProbe
            periodSeconds: 10
            timeoutSeconds: 2
          readinessProbe:
            exec:
              command:
              - /sbin/health_check.sh
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
          volumeMounts:
          - mountPath: /var/application.logs
            name: ${APP_NAME}-dsc2-logs
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: ${PULL_SECRET}
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-dsc2-logs
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-dsc3
    name: ${APP_NAME}-dsc3
  spec:
    progressDeadlineSeconds: 600
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: ${APP_NAME}-dsc3
    triggers:
      - type: ConfigChange
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-dsc3
          isvaaffinity: ${APP_NAME}-dsc
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: isvaaffinity
                    operator: In
                    values:
                    - ${APP_NAME}-dsc
                topologyKey: kubernetes.io/hostname
        serviceAccountName: ${SERVICE_ACCOUNT}
        containers:
        - env:
          - name: INSTANCE
            value: "3"
          - name: CONTAINER_TIMEZONE
            value: ${TIMEZONE}
          - name: CONFIG_SERVICE_URL
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-service-url
          - name: CONFIG_SERVICE_USER_NAME
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-read-username
          - name: CONFIG_SERVICE_USER_PWD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-read-password
          image: icr.io/isva/verify-access-dsc:${ISVA_VERSION}
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-dsc3
          ports:
          - containerPort: 9443
            protocol: TCP
          - containerPort: 9444
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
              - /sbin/health_check.sh
              - livenessProbe
            periodSeconds: 10
            timeoutSeconds: 2
          readinessProbe:
            exec:
              command:
              - /sbin/health_check.sh
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
          volumeMounts:
          - mountPath: /var/application.logs
            name: ${APP_NAME}-dsc3-logs
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: ${PULL_SECRET}
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-dsc3-logs
          emptyDir: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-dsc4
    name: ${APP_NAME}-dsc4
  spec:
    progressDeadlineSeconds: 600
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: ${APP_NAME}-dsc4
    triggers:
      - type: ConfigChange
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          name: ${APP_NAME}-dsc4
          isvaaffinity: ${APP_NAME}-dsc
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: isvaaffinity
                    operator: In
                    values:
                    - ${APP_NAME}-dsc
                topologyKey: kubernetes.io/hostname
        serviceAccountName: ${SERVICE_ACCOUNT}
        containers:
        - env:
          - name: INSTANCE
            value: "4"
          - name: CONTAINER_TIMEZONE
            value: ${TIMEZONE}
          - name: CONFIG_SERVICE_URL
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-service-url
          - name: CONFIG_SERVICE_USER_NAME
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-read-username
          - name: CONFIG_SERVICE_USER_PWD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-config
                key: config-read-password
          image: icr.io/isva/verify-access-dsc4:${ISVA_VERSION}
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-dsc4
          ports:
          - containerPort: 9443
            protocol: TCP
          - containerPort: 9444
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            exec:
              command:
              - /sbin/health_check.sh
              - livenessProbe
            periodSeconds: 10
            timeoutSeconds: 2
          readinessProbe:
            exec:
              command:
              - /sbin/health_check.sh
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
          volumeMounts:
          - mountPath: /var/application.logs
            name: ${APP_NAME}-dsc4-logs
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: ${PULL_SECRET}
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-dsc4-logs
          emptyDir: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${DSC_SERVICE}
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-dsc1
  spec:
    ports:
    - name: service
      port: 9443
      protocol: TCP
      targetPort: 9443
    - name: replication
      port: 9444
      protocol: TCP
      targetPort: 9444
    selector:
      name: ${APP_NAME}-dsc1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${DSC_SERVICE}2
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-dsc2
  spec:
    ports:
    - name: service
      port: 9443
      protocol: TCP
      targetPort: 9443
    - name: replication
      port: 9444
      protocol: TCP
      targetPort: 9444
    selector:
      name: ${APP_NAME}-dsc2
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${DSC_SERVICE}3
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-dsc3
  spec:
    ports:
    - name: service
      port: 9443
      protocol: TCP
      targetPort: 9443
    - name: replication
      port: 9444
      protocol: TCP
      targetPort: 9444
    selector:
      name: ${APP_NAME}-dsc3
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${DSC_SERVICE}4
    labels:
      app: ${APP_NAME}
      name: ${APP_NAME}-dsc4
  spec:
    ports:
    - name: service
      port: 9443
      protocol: TCP
      targetPort: 9443
    - name: replication
      port: 9444
      protocol: TCP
      targetPort: 9444
    selector:
      name: ${APP_NAME}-dsc4
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
parameters:
  - displayName: Application Name
    description: This is the name for the application which is used to create unique object names in the cluster.
    name: APP_NAME
    value: verifyaccess
  - displayName: Verify Access Image Version
    description: The tag that will be used to pull the icr.io/isva/verify-access images.
    name: ISVA_VERSION
    value: 10.0.6.0
  - displayName: Primary DSC Service Name
    description: The name for the Primary DSC service.  Also used as the hostname for connections within the cluster.
      Other DSC service/host names will have 2, 3, and 4 appended.
    name: DSC_SERVICE
    value: isvadsc
  - displayName: Image Pull Secret
    description: This is an (existing) docker login secret for pulling the Access Manager image.
      Only required if hosting images on a private repository
    name: PULL_SECRET
    value: dockerlogin
  - displayName: Timezone
    description: The timezone for message logging (e.g. Europe/London)
    name: TIMEZONE
    value: Etc/UTC
  - displayName: DSC Service Account
    description: This is the (existing) Service Account for running the DSC pods.
    name: SERVICE_ACCOUNT
    value: default
