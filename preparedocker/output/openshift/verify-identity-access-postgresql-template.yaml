apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: verify-identity-access-postgresql
metadata:
  creationTimestamp: null
  name: verify-identity-access-postgresql
  annotations:
    openshift.io/display-name: IBM Security Verify Access PostgreSQL
    iconClass: icon-sso
    description: A PostgreSQL container provided for testing.
    openshift.io/long-description: A PostgreSQL container which has the IBM Verify Identity Access schema
      pre-loaded and is enabled for secure communication.  This container is provided as-is
      for testing and demonstration purposes only.
    openshift.io/documentation-url: https://ibm.biz/verifyaccesscontainers
    openshift.io/provider-display-name: IBM Verify Identity Access
    openshift.io/support-url: https://ibm.biz/iamcommunity
    tags: ibm, verifyaccess, isam, isva, ivia
message: |-
  The following service has been created in your project: ${APP_NAME}.

  Database name: ${DB_NAME}
  Admin ID: ${ADMIN_ID}
  Admin Password: ${ADMIN_PW}
objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APP_NAME}-data
    labels:
      app: ${APP_NAME}
  spec:
    storageClassName: ${STORAGE_CLASS}
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 50Mi
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-admin_id: '{.data[''admin-id'']}'
      template.openshift.io/expose-admin_password: '{.data[''admin-password'']}'
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  stringData:
    database-name: ${DB_NAME}
    admin-id: ${ADMIN_ID}
    admin-password: ${ADMIN_PW}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ${APP_NAME}
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
      spec:
        serviceAccountName: ${SERVICE_ACCOUNT}
        securityContext:
          runAsNonRoot: true
          runAsUser:    70
          fsGroup: ${{FS_GROUP}}
        containers:
        - env:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}
                key: admin-id
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}
                key: admin-password
          - name: POSTGRES_DB
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}
                key: database-name
          - name: POSTGRES_SSL_KEYDB
            value: /var/local/server.pem
          image: icr.io/ivia/ivia-postgresql:${DB_VERSION}
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 5
            periodSeconds: 10
          ports:
          - containerPort: 5432
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: ${APP_NAME}-data
          - mountPath: /var/local
            name: ${APP_NAME}-keys
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-data
          persistentVolumeClaim:
            claimName: ${APP_NAME}-data
        - name: ${APP_NAME}-keys
          secret:
            defaultMode: 420
            secretName: ${KEY_SECRET}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      app: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
parameters:
  - displayName: Application Name
    description: The name of the application.  Also used as the hostname for connections within the cluster.
    name: APP_NAME
    value: postgresql
  - displayName: Image Version
    description: The tag that will be used to pull the icr.io/ivia/ivia-postgresql image.
    name: DB_VERSION
    value: 11.0.0.0
  - displayName: Administrator Username
    description: The username for the database administrator.
    name: ADMIN_ID
    value: postgres
  - displayName: Administrator Password
    description: The password for the database administrator.
    name: ADMIN_PW
    from: '[a-zA-Z0-9]{16}'
    generate: expression
  - displayName: Database Name
    description: The name of the database to be created for Verify Identity Access data.
    name: DB_NAME
    value: ivia
  - displayName: Keys Secret
    description: The (existing) Secret for crypto data.  File required is server.pem.
    name: KEY_SECRET
    value: postgresql-keys
  - displayName: Storage class
    description: Storage class that will be requested by PVC.
    name: STORAGE_CLASS
    value: default
  - displayName: Service Account
    description: This is the (existing) Service Account for running the pods.  It must allow runAsNonRoot.
    name: SERVICE_ACCOUNT
    value: verifyaccess-nonroot
  - displayName: fsGroup
    description: Value for the fsGroup to be added to security context.  Needs to be 0 if volumes mounted as root.
    name: FS_GROUP
    value: '0'
